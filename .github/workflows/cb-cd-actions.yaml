name: CB-CD-ACTIONS-WORKFLOW

on:
  push:
    branches:
      - main
      - master
    tags:
      - v*.*.*

jobs:
  cb-env-job:
    name: CB-ENV-JOB
    if: ${{ github.repository_owner == 'cloud-barista' }}
    runs-on: ubuntu-latest
    outputs:
      #branch: ${{ steps.cev.outputs.branch }}
      #author_association: ${{ steps.cev.outputs.author_association }}
      skip_tags: ${{ steps.cev.outputs.steps.cev.outputs.skip_tags }}
    steps:
      - name: Check and configure environment variable
        id: cev
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            (async _ => {
              console.log('context', context) 

              /****************************************
              var branch = ""
              if(context.eventName == "pull_request") branch = context.payload.pull_request.base.ref
              else branch = context.ref.replace("refs/heads/", "")
              console.log('branch', branch)
              core.setOutput('branch', branch)
              ****************************************/

              /****************************************
              var author_association = ""
              if(context.actor == context.payload.repository.owner.login) author_association = "OWNER"
              if(author_association == "") {        
                try {
                  res = await github.orgs.listMembers({org: "cloud-barista" })
                  console.log('listMembers', res)
                  if (res.status >= 200 && res.status < 300) {
                    isMember = res.data.some(({ login }) => login === context.actor)
                    if(isMember) author_association = "MEMBER"
                  }                  
                } catch (e) {
                  console.log(e)
                }              
              }
              if(author_association == "") {        
                try {
                  res = await github.repos.listCollaborators({
                    owner: context.payload.repository.owner.login,
                    repo: context.payload.repository.name,
                  })
                  console.log('listCollaborators', res)
                  if (res.status >= 200 && res.status < 300) {
                    isCollaborator = res.data.some(({ login }) => login === context.actor)
                    if(isCollaborator) author_association = "COLLABORATOR"
                  }                   
                } catch (e) {
                  console.log(e)
                }            
              }
              console.log('author_association', author_association)
              core.setOutput('author_association', author_association)
              ****************************************/

              var skip_tags = ''
              var title = ""
              if(context.eventName == "pull_request") title = context.payload.pull_request.title
              else title = context.payload.head_commit.message
               
              var matches = title.match(/\[.+?\]/g)
              if(matches != null) {
                for (var i = 0; i < matches.length; i++) { 
                  skip_tags += matches[i]
                }
              }
              
              console.log('skip_tags', skip_tags)
              core.setOutput('skip_tags', skip_tags)

            })();

  cb-cd-image-deploy-job:
    name: CB-CD-IMAGE-DEPLOY-JOB
    if: ${{ github.repository_owner == 'cloud-barista' }}
    runs-on: ubuntu-latest
    needs: [cb-env-job]
    env:
      DOCKER_REPO: cloud-barista
      IMAGE_NAME: poc-cicd-tumblebug
    steps:
      - uses: actions/checkout@v2

      - name: Make Output Folder
        run: |
          mkdir -p ./outputs

      - name: Prepare Tags
        id: prep
        run: |
          VERSION=latest
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi

          DOCKER_IMAGE=$DOCKER_REPO/$IMAGE_NAME
          DOCKER_TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}.*$ ]]; then
            DOCKER_TAGS="$DOCKER_TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=docker-image::${DOCKER_IMAGE}
          echo ${DOCKER_IMAGE}
          echo ::set-output name=docker-tags::${DOCKER_TAGS}
          echo ${DOCKER_TAGS}
          GHCR_IMAGE=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          GHCR_TAGS="${GHCR_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}.*$ ]]; then
            GHCR_TAGS="$GHCR_TAGS,${GHCR_IMAGE}:latest"
          fi
          echo ::set-output name=ghcr-image::${GHCR_IMAGE}
          echo ${GHCR_IMAGE}          
          echo ::set-output name=ghcr-tags::${GHCR_TAGS}
          echo ${GHCR_TAGS}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2.1.4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      #- name: Login to Docker Hub
      #  uses: docker/login-action@v1
      #  with:
      #    username: ${{ secrets.DOCKER_USERNAME }}
      #    password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and publish
        id: imgpublish
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./Dockerfile
          platforms: linux/amd64 # linux/arm/v7,linux/arm64,linux/386,linux/ppc64le,linux/s390x,linux/arm/v6
          push: true
          tags: |
            ${{ steps.prep.outputs.ghcr-tags }}
          #tags: |
          #  ${{ steps.prep.outputs.docker-tags }}
          #  ${{ steps.prep.outputs.ghcr-tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Publish Image Check
        id: imgcheck
        run: |
          (docker pull ${{ steps.prep.outputs.ghcr-tags }}@${{ steps.imgpublish.outputs.digest }} > ./outputs/ghcrpublish.log 2>&1; echo $? > ./outputs/ghcrpublish.check ) || true

          if [ -f "./outputs/ghcrpublish.check" ] ; then
            echo "======= ghcrpublish.check ======="
            cat ./outputs/ghcrpublish.check
          fi    
          if [ -f "./outputs/ghcrpublish.log" ] ; then
            echo "======= ghcrpublish.log ======="
            cat ./outputs/ghcrpublish.log
          fi

          docker rmi $(docker images -f "dangling=true" -q)
                   
          (docker pull ${{ steps.prep.outputs.docker-tags }}@${{ steps.imgpublish.outputs.digest }} > ./outputs/dockerpublish.log 2>&1; echo $? > ./outputs/dockerpublish.check ) || true

          if [ -f "./outputs/dockerpublish.check" ] ; then
            echo "======= dockerpublish.check ======="
            cat ./outputs/dockerpublish.check
          fi    
          if [ -f "./outputs/dockerpublish.log" ] ; then
            echo "======= dockerpublish.log ======="
            cat ./outputs/dockerpublish.log
          fi

      - name: Upload Result
        uses: actions/upload-artifact@v2
        with:
          name: cb-artifact-image-deploy
          path: outputs/